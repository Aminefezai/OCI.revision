les composants de docker :
1/docker client : les commande build, run , pull se fait par le biais du docker client .
2/docker deamon ( moteur docker) c'est celui qui va exécuter les commande c'est un hote ( serveur) qui pourra etre installé sur la meme machine clt 
ou a distance
3/docker registry : docker propose que docker hub comme registry public ou privé , mais si nous souhaitons garder en interne le dépot , 
il faut mettre en place un serveur , sinon on heberge docker registry dans le cloud.
Commandes docker :
docker run "image name" :pour la création et l'exécution d'un conteneur.
docker start, stop, restard non du conteneur ou ID
docker inspect "non duc conteneur ou ID"-->information sur les coneteneurs.
docker logs.. ya3tik journal du log d'un conyeneur.
docker ps ; ya3tik les conteneur qui sont en cours d'exécution 
docker rmi ou remove "image name" pour la suppression.
docker image pull "nom de l'im"  consiste à télécharger cette image depuis docker hub.
docker build "nom de l'image":tag path de l'image : pour créer une image docker depuis un fichier existant
docker commit "container name ensuite "image name" pour créer une image docker depuis un conteneur en cours d'exécution
docker tag mon-app:latest mon-app:version1 si nous souhaitons attribuer la version 1 à notre image.
docker tag "nom de l'image" nomd'utilisateur/nom de referentiel en ligne tag pour tager et pousser au meme temps une image vers un ref en ligne.
docker login && docker image push "imagename":tag
docker image ls ou docker images : liste tout les images qui exite en local sur la machine ( sinon sur le cloud c autre chose) pour le privé il 
est configuré avec des commandes spécifiques qu'il fallait juste les consulter.
*nous ne pouvons pas supprimer une image dont un conteneur quil'utilise est en cours d'exécution , il faut tt d'abord arreter le conteneur.
Curl 127.0.1.1:8080 permet d'acceder à l'application que nous avons mapper avec l'hote dont l'ip est 127.0.1.1.
OCIR : service proposé par oracle , c'est un registre de conteneurs ,  la ou on peut héberger notre resgistre public ou privé.
OCI est préconfiguré avec docker via le cloud shell
**working with docker file :

le docker file ; 
c'est un document qui définit le docker image , donc pour la création de l'image il nous faut un docker file
La commande WORKDIR permet de définir le répertoire de travail d’un conteneur Docker à un moment donné. La commande est spécifiée dans le Dockerfile.
Le mot-clé FROM permet d'indiquer sur quelle image de base nous construirons notre propre image personnalisée.
RUN lance une ou plusieurs commandes Linux pendant la phase de construction de notre image.
ADD et COPY permettent de copier un dossier et/ou des fichiers qui se trouvent dans notre machine locale vers le conteneur
L'instruction VOLUME permet de créer automatiquement un répertoire dans la machine locale et le conteneur qui seront liés. Celui-ci sera automatiquement supprimé à la destruction du conteneur.
Expliquons ce que WORKDIR va produire. En quelque sorte cette instruction est un équivalent de la commande cd qui nous permet d'accéder à un dossier.
Par conséquent, au lancement du conteneur, nous serons positionner dans le dossier /nom. Pareillement les instructions RUN, ENTRYPOINT, COPY, ADD et CMD seront exécutées à partir de répertoire sélectionné dans WORKDIR.
